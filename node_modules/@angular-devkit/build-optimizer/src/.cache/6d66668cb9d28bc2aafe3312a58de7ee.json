{"remainingRequest":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\ng-auto-complete\\completer\\completer.component.js","dependencies":[{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\ng-auto-complete\\completer\\completer.component.js","mtime":1528355678000},{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530166040470},{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function () { if (t[0] & 1)\n            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f)\n            throw new TypeError(\"Generator is already executing.\");\n        while (_)\n            try {\n                if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done)\n                    return t;\n                if (y = 0, t)\n                    op = [0, t.value];\n                switch (op[0]) {\n                    case 0:\n                    case 1:\n                        t = op;\n                        break;\n                    case 4:\n                        _.label++;\n                        return { value: op[1], done: false };\n                    case 5:\n                        _.label++;\n                        y = op[1];\n                        op = [0];\n                        continue;\n                    case 7:\n                        op = _.ops.pop();\n                        _.trys.pop();\n                        continue;\n                    default:\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                            _ = 0;\n                            continue;\n                        }\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                            _.label = op[1];\n                            break;\n                        }\n                        if (op[0] === 6 && _.label < t[1]) {\n                            _.label = t[1];\n                            t = op;\n                            break;\n                        }\n                        if (t && _.label < t[2]) {\n                            _.label = t[2];\n                            _.ops.push(op);\n                            break;\n                        }\n                        if (t[2])\n                            _.ops.pop();\n                        _.trys.pop();\n                        continue;\n                }\n                op = body.call(thisArg, _);\n            }\n            catch (e) {\n                op = [6, e];\n                y = 0;\n            }\n            finally {\n                f = t = 0;\n            }\n        if (op[0] & 5)\n            throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Component, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';\nimport { ComparableAutoCompleteString, SearchableAutoCompleteString } from '../classes/AutocompleteItem';\nimport { NgDropdownDirective } from '../dropdown/ng-dropdown.directive';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/debounceTime';\nvar CompleterComponent = /*@__PURE__*/ (function () {\n    function CompleterComponent(_zone) {\n        this._zone = _zone;\n        this.cleared = new EventEmitter();\n        this.selected = new EventEmitter();\n        this.noResult = new EventEmitter();\n        this.group = {};\n        this._change = new Subject();\n        this._items = {};\n        this._completer = '';\n        this._highlight = '';\n        this._DOM = {\n            notFound: false,\n            empty: false,\n            placeholder: null,\n            selected: '',\n            isLoading: false\n        };\n    }\n    /**\n     *\n     */\n    CompleterComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            _this._change\n                .debounceTime(300)\n                .subscribe(function (value) {\n                _this._zone.run(function () {\n                    if (_this.group.async !== null) {\n                        _this.RunAsyncFunction(value);\n                    }\n                    else {\n                        _this.OnModelChange(value);\n                    }\n                });\n            });\n        });\n        this.SetItems();\n    };\n    /**\n     * Only used when completion is off.\n     * @constructor\n     */\n    CompleterComponent.prototype.RegisterClick = function () {\n        if (!this.group.completion) {\n            this.SwitchDropdownState();\n        }\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.DropdownArray = function () {\n        if (this.group.completion) {\n            this.SwitchDropdownState();\n        }\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.SwitchDropdownState = function () {\n        if (this.dropdown._open) {\n            this.CloseDropdown();\n            return;\n        }\n        /**\n         *\n         */\n        this.OpenDropdown();\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.CloseDropdown = function () {\n        this.dropdown._open = false;\n        /**\n         *\n         * @type {string}\n         */\n        this._DOM.placeholder = null;\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.OpenDropdown = function () {\n        this.dropdown.Open();\n        /**\n         *\n         * @type {string}\n         */\n        this._DOM.placeholder = null;\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.SetItems = function () {\n        this._items = this.group.value;\n        this.IsInitialEmpty();\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.SelectItem = function (item) {\n        var i;\n        if (typeof item === 'string') {\n            i = this._items[item];\n            this._DOM.selected = item;\n        }\n        else {\n            i = item;\n            this._DOM.selected = SearchableAutoCompleteString(item.title, item.id);\n        }\n        this._completer = i.title;\n        this._highlight = '';\n        this.dropdown.Close(null, true);\n        this.selected.emit({ group: { key: this.group.key }, item: i });\n    };\n    /**\n     *\n     * @param {string} value\n     * @returns {Promise<void>}\n     * @constructor\n     */\n    CompleterComponent.prototype.RunAsyncFunction = function (value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var values;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._completer = value;\n                        this._highlight = value;\n                        this._DOM.selected = null;\n                        if (!(value.length === 0))\n                            return [3 /*break*/, 1];\n                        this.group.InitialValue();\n                        this.ClearModel();\n                        this.dropdown.Close('', true);\n                        return [3 /*break*/, 3];\n                    case 1:\n                        if (!(value.length > this.group.searchLength))\n                            return [3 /*break*/, 3];\n                        this._DOM.isLoading = true;\n                        return [4 /*yield*/, this.group.async(value)];\n                    case 2:\n                        values = _a.sent();\n                        this.group.SetNewValue(values, this.group.keys.titleKey);\n                        this._DOM.isLoading = false;\n                        this._items = this.group.value;\n                        this.EmptySearch(this._items, value);\n                        // User has typed something now, results could be shown. We need to remove the \"is-initial-empty\" class.\n                        this.IsInitialEmpty();\n                        this.dropdown.Open();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     *\n     * @param value\n     * @constructor\n     */\n    CompleterComponent.prototype.OnModelChange = function (value) {\n        this._completer = value;\n        this._highlight = value;\n        this._DOM.selected = null;\n        if (value.length === 0) {\n            this.ClearModel();\n            this.dropdown.Close('', true);\n        }\n        else if (value.length > this.group.searchLength) {\n            this.CompareItemsAndSet(value);\n        }\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.ClearModel = function () {\n        this._DOM.selected = null;\n        this._DOM.notFound = false;\n        this.cleared.emit(this.group.key);\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.CompareItemsAndSet = function (value) {\n        var obj = {};\n        for (var key in this.group.value) {\n            if (ComparableAutoCompleteString(key).toLowerCase().indexOf(value.toLowerCase()) > -1) {\n                obj[key] = this.group.value[key];\n            }\n        }\n        this._items = obj;\n        this.EmptySearch(this._items, value);\n        // User has typed something now, results could be shown. We need to remove the \"is-initial-empty\" class.\n        this.IsInitialEmpty();\n        this.dropdown.Open();\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.OnInputBlurred = function () {\n        if (!this.HasChosenValue()) {\n            /**\n             * Let component know completer input has been cleared -\n             * this function shows the list again, also resets children, if chosen.\n             */\n            this.OnModelChange('');\n        }\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.OnHoverDropdownItem = function (item) {\n        if (typeof item == 'string') {\n            this._DOM.placeholder = this._items[item];\n            return;\n        }\n        if (item == null) {\n            this._DOM.placeholder = null;\n            return;\n        }\n        this._DOM.placeholder = item;\n    };\n    // =======================================================================//\n    // ! Utils                                                                //\n    // =======================================================================//\n    CompleterComponent.prototype.IsInitialEmpty = function () {\n        if (Object.keys(this._items).length === 0 && this._completer.length === 0) {\n            this._DOM.empty = true;\n            return;\n        }\n        this._DOM.empty = false;\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.HasChosenValue = function () {\n        return this._DOM.selected !== null;\n    };\n    /**\n     *\n     * @param {Object} obj\n     * @param {string} query\n     * @constructor\n     */\n    CompleterComponent.prototype.EmptySearch = function (obj, query) {\n        if (Object.keys(obj).length > 0) {\n            this._DOM.notFound = false;\n            return;\n        }\n        this._DOM.notFound = true;\n        this.noResult.emit({ group: { key: this.group.key }, query: query });\n    };\n    /**\n     *\n     * @constructor\n     */\n    CompleterComponent.prototype.ClearValue = function () {\n        this._completer = '';\n        this._DOM.selected = null;\n        this.group.InitialValue();\n        this.IsInitialEmpty();\n        /**\n         *\n         */\n        this.selected.emit({ group: { key: this.group.key }, item: null });\n    };\n    return CompleterComponent;\n}());\nexport { CompleterComponent };\n//# sourceMappingURL=completer.component.js.map\n",null]}