{"remainingRequest":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\ngx-filter-pipe\\esm5\\ngx-filter-pipe.js","dependencies":[{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\ngx-filter-pipe\\esm5\\ngx-filter-pipe.js","mtime":1518984046000},{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530166040470},{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Pipe, Injectable, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar FilterPipe = /** @class */ /*@__PURE__*/ (function () {\n    function FilterPipe() {\n    }\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    FilterPipe.prototype.filterByString = function (filter) {\n        if (filter) {\n            filter = filter.toLowerCase();\n        }\n        return function (value) {\n            return !filter || (value ? ('' + value).toLowerCase().indexOf(filter) !== -1 : false);\n        };\n    };\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    FilterPipe.prototype.filterByBoolean = function (filter) {\n        return function (value) {\n            return Boolean(value) === filter;\n        };\n    };\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    FilterPipe.prototype.filterByObject = function (filter) {\n        var _this = this;\n        return function (value) {\n            for (var /** @type {?} */ key in filter) {\n                if (key === '$or') {\n                    if (!_this.filterByOr(filter.$or)(_this.getValue(value))) {\n                        return false;\n                    }\n                    continue;\n                }\n                var /** @type {?} */ walker = value;\n                var /** @type {?} */ found = false;\n                do {\n                    if (walker.hasOwnProperty(key) || Object.getOwnPropertyDescriptor(walker, key)) {\n                        found = true;\n                        break;\n                    }\n                } while (walker = Object.getPrototypeOf(walker));\n                if (!found) {\n                    return false;\n                }\n                var /** @type {?} */ val = _this.getValue(value[key]);\n                var /** @type {?} */ filterType = typeof filter[key];\n                var /** @type {?} */ isMatching = void 0;\n                if (filterType === 'boolean') {\n                    isMatching = _this.filterByBoolean(filter[key])(val);\n                }\n                else if (filterType === 'string') {\n                    isMatching = _this.filterByString(filter[key])(val);\n                }\n                else if (filterType === 'object') {\n                    isMatching = _this.filterByObject(filter[key])(val);\n                }\n                else {\n                    isMatching = _this.filterDefault(filter[key])(val);\n                }\n                if (!isMatching) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    };\n    /**\n     * Filter value by $or\n     * @param {?} filter\n     * @return {?}\n     */\n    FilterPipe.prototype.filterByOr = function (filter) {\n        return function (value) {\n            var /** @type {?} */ hasMatch = false;\n            var /** @type {?} */ length = filter.length;\n            var /** @type {?} */ arrayComparison = function (i) {\n                return value.indexOf(filter[i]) !== -1;\n            };\n            var /** @type {?} */ otherComparison = function (i) {\n                return value === filter[i];\n            };\n            var /** @type {?} */ comparison = Array.isArray(value) ? arrayComparison : otherComparison;\n            for (var /** @type {?} */ i = 0; i < length; i++) {\n                if (comparison(i)) {\n                    hasMatch = true;\n                    break;\n                }\n            }\n            return hasMatch;\n        };\n    };\n    /**\n     * Checks function's value if type is function otherwise same value\n     * @param {?} value\n     * @return {?}\n     */\n    FilterPipe.prototype.getValue = function (value) {\n        return typeof value === 'function' ? value() : value;\n    };\n    /**\n     * Defatul filterDefault function\n     * @param {?} filter\n     * @return {?}\n     */\n    FilterPipe.prototype.filterDefault = function (filter) {\n        return function (value) {\n            return filter === undefined || filter == value;\n        };\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    FilterPipe.prototype.isNumber = function (value) {\n        return !isNaN(parseInt(value, 10)) && isFinite(value);\n    };\n    /**\n     * @param {?} array\n     * @param {?} filter\n     * @return {?}\n     */\n    FilterPipe.prototype.transform = function (array, filter) {\n        var /** @type {?} */ type = typeof filter;\n        if (!array) {\n            return array;\n        }\n        if (type === 'boolean') {\n            return array.filter(this.filterByBoolean(filter));\n        }\n        if (type === 'string') {\n            if (this.isNumber(filter)) {\n                return array.filter(this.filterDefault(filter));\n            }\n            return array.filter(this.filterByString(filter));\n        }\n        if (type === 'object') {\n            return array.filter(this.filterByObject(filter));\n        }\n        if (type === 'function') {\n            return array.filter(filter);\n        }\n        return array.filter(this.filterDefault(filter));\n    };\n    return FilterPipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar FilterPipeModule = /** @class */ /*@__PURE__*/ (function () {\n    function FilterPipeModule() {\n    }\n    return FilterPipeModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { FilterPipeModule, FilterPipe };\n//# sourceMappingURL=ngx-filter-pipe.js.map\n",null]}