{"remainingRequest":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\ng-auto-complete\\dropdown\\ng-dropdown.directive.js","dependencies":[{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\ng-auto-complete\\dropdown\\ng-dropdown.directive.js","mtime":1528355678000},{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530166040470},{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nimport { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output } from \"@angular/core\";\nimport { IsMobileOrTablet } from \"../utils/utils\";\nvar NgDropdownDirective = /*@__PURE__*/ (function () {\n    function NgDropdownDirective(_eref) {\n        this._eref = _eref;\n        this.list = [];\n        this.active = null;\n        this.input = null;\n        this.element = null;\n        this.key = '';\n        this.completion = true;\n        this.hover = new EventEmitter();\n        this.selected = new EventEmitter();\n        this.closed = new EventEmitter();\n        this._open = false;\n        this._list = [];\n        this._class = '';\n    }\n    /**\n     *\n     */\n    NgDropdownDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this._class = \"dr-item-\" + this.key + \"-\";\n        if (this.RefExists()) {\n            this.input.addEventListener('keydown', function (event) {\n                _this.keyDown(event);\n            });\n        }\n        if (!this.completion) {\n            document.addEventListener('keydown', function (event) {\n                if (_this._open) {\n                    _this.keyDown(event);\n                }\n            });\n        }\n        if (!IsMobileOrTablet()) {\n            this._eref.nativeElement.addEventListener('mouseover', function (event) {\n                _this.OnMouseOver(event);\n            });\n        }\n        /**\n         *\n         * @private\n         */\n        this.PrepareList();\n    };\n    /**\n     *\n     * @param changes\n     */\n    NgDropdownDirective.prototype.ngOnChanges = function (changes) {\n        if (typeof changes['active'] !== 'undefined' && !changes['active'].firstChange) {\n            this.PrepareList();\n        }\n        if (typeof changes['list'] !== 'undefined') {\n            this.list = changes['list'].currentValue;\n            /**\n             *\n             */\n            this.PrepareList();\n        }\n    };\n    /**\n     *\n     * @param event\n     */\n    NgDropdownDirective.prototype.keyDown = function (event) {\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n        /**\n         *\n         */\n        switch (event.code) {\n            case 'ArrowDown':\n                this.Open();\n                /**\n                 *\n                 */\n                this.SetActive(this.FindActive() + 1);\n                this.DropdownFocusAreaDown();\n                event.preventDefault();\n                break;\n            case 'ArrowUp':\n                this.Open();\n                /**\n                 *\n                 */\n                this.SetActive(this.FindActive() - 1);\n                this.DropdownFocusAreaUp();\n                event.preventDefault();\n                break;\n            case 'Enter':\n                this.EmitSelected();\n                this.Close(null, true);\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.Close(null, true);\n                event.preventDefault();\n                break;\n            case 'Tab':\n                if (!event.shiftKey) {\n                    this.EmitSelected();\n                }\n                this.Close(null, true);\n                break;\n            default:\n                return;\n        }\n    };\n    /**\n     *\n     * @param event\n     */\n    NgDropdownDirective.prototype.OnMouseOver = function (event) {\n        // Mouse didn't actually move, so no logic needed.\n        if (event.movementX == 0 && event.movementY == 0) {\n            return;\n        }\n        /**\n         *\n         */\n        var el = event.target || event.srcElement;\n        if (el.id.length > 0 && el.id.includes(this._class)) {\n            this.SetActive(Number(el.id.slice(this._class.length, el.id.length)));\n        }\n    };\n    /**\n     *\n     * @constructor\n     */\n    NgDropdownDirective.prototype.EmitSelected = function () {\n        if (this.FindActive() > -1) {\n            this.selected.emit(this._list[this.FindActive()].key);\n        }\n    };\n    /**\n     *\n     * @constructor\n     */\n    NgDropdownDirective.prototype.DropdownFocusAreaDown = function () {\n        var scroll = this._eref.nativeElement.offsetHeight + this._eref.nativeElement.scrollTop;\n        /**\n         *\n         */\n        if ((this.GetElement(this.FindActive()).offsetTop + this.GetElement(this.FindActive()).offsetHeight) > scroll) {\n            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop - (this._eref.nativeElement.offsetHeight - this.GetElement(this.FindActive()).offsetHeight);\n        }\n    };\n    /**\n     *\n     * @constructor\n     */\n    NgDropdownDirective.prototype.DropdownFocusAreaUp = function () {\n        var scroll = this._eref.nativeElement.scrollTop;\n        /**\n         *\n         */\n        if (this.GetElement(this.FindActive()).offsetTop < scroll && scroll > 0) {\n            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop;\n        }\n    };\n    Object.defineProperty(NgDropdownDirective.prototype, \"opened\", {\n        // =======================================================================//\n        // ! Bindings                                                             //\n        // =======================================================================//\n        /**\n         *\n         * @returns {boolean}\n         */\n        get: function () {\n            return this._open;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // =======================================================================//\n    // ! Listeners                                                            //\n    // =======================================================================//\n    /**\n     *\n     * @constructor\n     */\n    NgDropdownDirective.prototype.Close = function (event, force) {\n        var _this = this;\n        if (force === void 0) {\n            force = false;\n        }\n        if (!this._open) {\n            return;\n        }\n        var close = function () {\n            _this._open = false;\n            /**\n             * Emit NULL so listening components know what to do.\n             */\n            _this.ClearActive();\n            _this.hover.emit(null);\n            _this.closed.emit();\n        };\n        if (force) {\n            close();\n            return;\n        }\n        if ((this._open && (!this.element.contains(event.target)))) {\n            close();\n        }\n    };\n    // =======================================================================//\n    // ! Utils                                                                //\n    // =======================================================================//\n    /**\n     *\n     * @constructor\n     */\n    NgDropdownDirective.prototype.Open = function () {\n        var _this = this;\n        setTimeout(function () {\n            if (!_this._open && !_this._eref.nativeElement.classList.contains('is-initial-empty')) {\n                _this._open = true;\n                _this.PrepareList();\n                /**\n                 *\n                 */\n                if (_this.FindActive() < 0) {\n                    _this._eref.nativeElement.scrollTop = 0;\n                }\n                else {\n                    _this._eref.nativeElement.scrollTop = _this.GetElement(_this.FindActive()).offsetHeight * _this.FindActive();\n                }\n            }\n        }, 0);\n    };\n    /**\n     *\n     * @returns {boolean}\n     * @constructor\n     */\n    NgDropdownDirective.prototype.RefExists = function () {\n        return typeof this.input !== 'undefined';\n    };\n    /**\n     *\n     * @private\n     */\n    NgDropdownDirective.prototype.FindActive = function () {\n        return this._list.reduce(function (result, item, index) {\n            if (item.active) {\n                result = index;\n            }\n            return result;\n        }, -1);\n    };\n    /**\n     *\n     * @param index\n     * @private\n     */\n    NgDropdownDirective.prototype.SetActive = function (index) {\n        if (index > this._list.length - 1 || index < 0)\n            return;\n        /**\n         *\n         */\n        this.ClearActive();\n        this._list[index].active = true;\n        this.hover.emit(this._list[index].key);\n        /**\n         *\n         */\n        this.GetElement(index).classList.add('active');\n    };\n    /**\n     *\n     * @param index\n     * @constructor\n     */\n    NgDropdownDirective.prototype.GetElement = function (index) {\n        return this._eref.nativeElement.children[index];\n    };\n    /**\n     *\n     * @private\n     */\n    NgDropdownDirective.prototype.ClearActive = function () {\n        var _this = this;\n        this._list.forEach(function (item, index) {\n            item.active = false;\n            /**\n             *\n             * @type {string}\n             */\n            _this.GetElement(index).classList.remove('active');\n        });\n    };\n    /**\n     *\n     * @returns {[{item: any, active: boolean}]}\n     * @constructor\n     */\n    NgDropdownDirective.prototype.PrepareList = function () {\n        var _this = this;\n        this._list = Object.keys(this.list).map(function (key) {\n            return {\n                key: key,\n                active: _this.ActiveItem(key)\n            };\n        });\n        /**\n         *\n         */\n        this.PrepareChildrenList();\n    };\n    /**\n     *\n     * @param item\n     * @returns {boolean}\n     * @constructor\n     */\n    NgDropdownDirective.prototype.ActiveItem = function (item) {\n        return this.active !== null && item === this.active;\n    };\n    /**\n     *\n     * @constructor\n     */\n    NgDropdownDirective.prototype.DetermineActiveClass = function () {\n        var _this = this;\n        this._list.forEach(function (item, index) {\n            if (typeof _this.GetElement(index) === 'undefined') {\n                return;\n            }\n            /**\n             *\n             */\n            _this.GetElement(index).classList.remove('active');\n            if (item.active)\n                _this.GetElement(index).classList.add('active');\n        });\n    };\n    /**\n     *\n     * @constructor\n     */\n    NgDropdownDirective.prototype.PrepareChildrenList = function () {\n        var _this = this;\n        var list = this._eref.nativeElement.children;\n        setTimeout(function () {\n            for (var i = 0; i < list.length; i++) {\n                list[i].id = _this._class + i;\n            }\n        }, 0);\n        /**\n         *\n         */\n        this.DetermineActiveClass();\n    };\n    ;\n    /**\n     *\n     * @constructor\n     * @param object\n     */\n    NgDropdownDirective.prototype.DeReference = function (object) {\n        var item = object.item;\n        /**\n         *\n         */\n        return Object.assign({}, __assign({}, item));\n    };\n    /**\n     *\n     */\n    NgDropdownDirective.prototype.ngOnDestroy = function () {\n        if (this.RefExists()) {\n            this.wheelHandler = this.removeEventListner.bind(this.input);\n            // this.input.removeEventListener('keydown');\n        }\n        if (!this.completion) {\n            this.wheelHandler = this.removeEventListner.bind(document);\n            // document.removeEventListener('keydown');\n        }\n        if (!IsMobileOrTablet()) {\n            this.wheelHandler = this.removeEventListner.bind(this._eref);\n            // this._eref.nativeElement.removeEventListener('mouseover');\n        }\n    };\n    NgDropdownDirective.prototype.removeEventListner = function (elem) {\n        elem.removeEventListener('wheel', this.wheelHandler, true);\n    };\n    return NgDropdownDirective;\n}());\nexport { NgDropdownDirective };\n//# sourceMappingURL=ng-dropdown.directive.js.map\n",null]}