{"remainingRequest":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\ng-auto-complete\\ng-autocomplete.component.js","dependencies":[{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\ng-auto-complete\\ng-autocomplete.component.js","mtime":1528355678000},{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530166040470},{"path":"C:\\Users\\Divya\\Documents\\edWisor\\iProjects\\GoT\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Component, EventEmitter, Input, Output, ViewChild, ViewChildren } from '@angular/core';\nimport { CompleterComponent } from './completer/completer.component';\nimport { ReturnStringArrayByID } from './utils/utils';\nimport { Subject } from 'rxjs/Subject';\nvar NgAutocompleteComponent = /*@__PURE__*/ (function () {\n    function NgAutocompleteComponent() {\n        this.selected = new EventEmitter();\n        this.noResult = new EventEmitter();\n        this.group = [];\n        this.key = '';\n        this.classes = [];\n        this._viewHasBeenInit = false;\n    }\n    NgAutocompleteComponent.prototype.ngOnChanges = function (changes) {\n    };\n    /**\n     *\n     */\n    NgAutocompleteComponent.prototype.ngOnInit = function () {\n    };\n    /**\n     *\n     */\n    NgAutocompleteComponent.prototype.ngAfterViewChecked = function () {\n        var el = this.init.nativeElement.querySelector('.after-view-init');\n        if (window.getComputedStyle(el).length > 0) {\n            this._viewHasBeenInit = true;\n        }\n    };\n    /**\n     *\n     * @constructor\n     * @param selected\n     */\n    NgAutocompleteComponent.prototype.ListenToSelected = function (selected) {\n        this.selected.emit(selected);\n        /**\n         *\n         */\n        this.SetChildren(selected);\n    };\n    /**\n     *\n     * @constructor\n     * @param group\n     */\n    NgAutocompleteComponent.prototype.NoResult = function (group) {\n        this.noResult.emit(group);\n    };\n    /**\n     *\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.InputCleared = function (key) {\n        var _this = this;\n        this.group.forEach(function (group) {\n            if (group.key === key || group.parent === key) {\n                _this.ResetInput(group.key);\n            }\n        });\n        /**\n         * Items may have changed, need to te re-set list in completer components.\n         */\n        this.TriggerChange();\n    };\n    /**\n     *\n     * @param selected\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.SetChildren = function (selected) {\n        var _this = this;\n        this.group.forEach(function (item) {\n            if (item.parent == selected.group.key) {\n                _this.ResetInput(item.key);\n                /**\n                 *\n                 */\n                if (selected.item !== null && typeof selected.item.children !== 'undefined') {\n                    item.SetNewValue(selected.item.children, selected.group.keys.titleKey);\n                }\n            }\n        });\n        /**\n         * Items may have changed, need to te re-set list in completer components.\n         */\n        this.TriggerChange();\n    };\n    /**\n     *\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.TriggerChange = function () {\n        this.completers.forEach(function (completer) {\n            completer.SetItems();\n        });\n    };\n    // =======================================================================//\n    // ! Utils                                                                //\n    // =======================================================================//\n    /**\n     *\n     * @param {string} key\n     * @returns {CompleterComponent}\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.GetInput = function (key) {\n        return this.completers.reduce(function (result, completer) {\n            if (completer.group.key === key) {\n                result = completer;\n            }\n            return result;\n        }, {});\n    };\n    /**\n     *\n     * @param {string} key\n     * @param {(completer: CompleterComponent) => void} f\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.SubscribeInput = function (key, f) {\n        if (this._viewHasBeenInit) {\n            var completer = this.GetInput(key);\n            /**\n             *\n             */\n            f(completer);\n            return;\n        }\n        var s = this.FindInput(key).subscribe(function (completer) {\n            f(completer);\n            /**\n             *\n             */\n            s.unsubscribe();\n        });\n    };\n    /**\n     *\n     * @param key\n     * @returns {CompleterComponent}\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.FindInput = function (key) {\n        var _this = this;\n        var s = new Subject();\n        var i = setInterval(function () {\n            if (_this._viewHasBeenInit) {\n                s.next(_this.GetInput(key));\n                s.complete();\n                /**\n                 *\n                 */\n                clearInterval(i);\n            }\n        }, 1000);\n        return s;\n    };\n    /**\n     *\n     * @param key\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.ResetInput = function (key) {\n        this.SubscribeInput(key, function (completer) {\n            completer.ClearValue();\n        });\n    };\n    /**\n     *\n     * @param key\n     * @param values\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.SetValues = function (key, values) {\n        var _this = this;\n        this.SubscribeInput(key, function (completer) {\n            completer.group.SetValues(values);\n            /**\n             * Items may have changed, need to te re-set list in completer components.\n             */\n            _this.TriggerChange();\n        });\n    };\n    /**\n     *\n     * @param {string} key\n     * @param {\"noResults\" | \"selectedValue\"} type\n     * @param {TemplateRef<any>} template\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.SetTemplate = function (key, type, template) {\n        var _this = this;\n        this.SubscribeInput(key, function (completer) {\n            completer.group[type] = template;\n            /**\n             * Items may have changed, need to te re-set list in completer components.\n             */\n            _this.TriggerChange();\n        });\n    };\n    /**\n     *\n     * @param {string} key\n     * @param promise\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.SetAsync = function (key, promise) {\n        var _this = this;\n        this.SubscribeInput(key, function (completer) {\n            completer.group.async = promise;\n            /**\n             * Items may have changed, need to te re-set list in completer components.\n             */\n            _this.TriggerChange();\n        });\n    };\n    /**\n     *\n     * @param key\n     * @param id\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.SelectItem = function (key, id) {\n        this.SubscribeInput(key, function (completer) {\n            Object.keys(completer._items).forEach(function (key) {\n                var f = \"_id_\" + String(id);\n                var c = key.substring(key.indexOf(f), key.length);\n                if (f === c) {\n                    completer.SelectItem(completer._items[key]);\n                }\n            });\n        });\n    };\n    /**\n     *\n     * @param key\n     * @param ids\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.RemovableValues = function (key, ids) {\n        var _this = this;\n        this.SubscribeInput(key, function (completer) {\n            completer.group.Removables(ReturnStringArrayByID(ids));\n            /**\n             * Items may have changed, need to te re-set list in completer components.\n             */\n            _this.TriggerChange();\n        });\n    };\n    /**\n     *\n     * @constructor\n     */\n    NgAutocompleteComponent.prototype.ResetInputs = function () {\n        var _this = this;\n        this.group.forEach(function (item) {\n            _this.ResetInput(item.key);\n        });\n    };\n    // =======================================================================//\n    // ! Static (utils)                                                       //\n    // =======================================================================//\n    /**\n     *\n     * @constructor\n     */\n    NgAutocompleteComponent.FindCompleter = function (key, list) {\n        var completer = list.filter(function (completer) {\n            return key === completer.key;\n        });\n        if (typeof completer[0] !== 'undefined') {\n            return completer[0];\n        }\n        return null;\n    };\n    return NgAutocompleteComponent;\n}());\nexport { NgAutocompleteComponent };\n//# sourceMappingURL=ng-autocomplete.component.js.map\n",null]}